import java.util.Scanner;

public class MadLib {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        // initialize variables
        String template;
        int first;
        int second;
        String inputType;
        String userInput;

        System.out.println("\nWelcome to Mad Libs!");

        // loop for multiple playthroughs
        while (true) {

            // pick from a set of mad libs templates
            template = chooseMadLib();

            // loop for multiple inputs
            while (true) {

                // find an input placeholder
                first = template.indexOf("|");

                // check if there are no placeholders left
                if (first == -1) {
                    break;
                }

                // find the end of the input placeholder
                second = template.indexOf("|", template.indexOf("|", first + 1));
                
                // get the text inside the placeholder
                inputType = template.substring(first + 1, second);

                System.out.println("\nEnter a " + inputType + ".");

                userInput = sc.nextLine();

                // replace the placeholder with the user input
                template = template.substring(0, first) + userInput + template.substring(second + 1);
            }

            System.out.println("\n\nYour Mad Lib is...\n");
            System.out.println(template);

            System.out.println("\n\nWould you like to play again? (y/n)");
            userInput = sc.nextLine();
            
            if (userInput.toLowerCase().equals("n")) {
                // end loop if user says no
                sc.close();
                System.out.println("\nThanks for playing!");
                return;

            } else if (userInput.toLowerCase().equals("y")) {
                // repeat loop if user says yes
                System.out.println("\nGenerating a new Mad Lib...");

            } else {
                // end loop if user inputs something invalid
                System.out.println("\nCouldn't process input, assuming no...");
                sc.close();
                System.out.println("\nThanks for playing!\n");
                return;
            }
        }

    }

    public static String chooseMadLib() {

        // using |partofspeech| as a placeholder for inputs
        // using a list for scalability

        String[] templates = {
            // templates made by me
            "I went to the |noun| and bought |plural noun|. They were |adjective|! I couldn't |verb| it.",
            "There are |number| types of |plural noun| in this |noun|: Those who can |verb|, and those who can't.",
            "To |verb| in |noun|, you need 3 things: a |noun|, a |noun|, and |plural noun|.",
            "I |adverb| |past tense verb| down the |noun|, but there was only |plural noun| at the bottom.",
            // example templates from pltw
            "I went to the animal |noun|; the |plural noun| and the |number| beasts were there.",
            "Once upon a time in a |adjective| land, a |noun| |adverb| grew.",
            // templates generated by chatgpt
            "My favorite way to spend a |adjective| afternoon is to |verb| with my |plural noun| near the |noun|.",
            "All I wanted was a |adjective| sandwich, but instead I got a plate full of |plural noun| and a very angry |noun|.",
            "You know it's going to be a |adjective| day when your |noun| starts to |verb| before |time|.",
            "They say if you look into the |noun| at midnight and whisper a |adjective| secret, a |noun| will appear.",
            "Don't trust a |noun| that smiles at you while holding |plural noun|â€”that's how I ended up in a |adjective| situation.",
            "I can't believe I accidentally |past tense verb| the mayor's |noun|. Now the whole town is full of |plural noun|."
        };

        // pick a random option from the list based on its length
        int random = (int) (Math.random() * templates.length);

        return templates[random];

    }

}